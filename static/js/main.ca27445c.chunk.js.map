{"version":3,"sources":["providers/RouterProvider/RouterProvider.tsx","utils/useDebounce.tsx","utils/helpers.ts","services/ApiService/const.ts","components/WeatherIcon.tsx","components/Autocomplete.tsx","components/SearchWeather.tsx","services/ApiService/fetch.ts","services/ApiService/queries/WeatherFind/index.ts","containers/SearchContainer.tsx","pages/SearchPage.tsx","services/ApiService/queries/WeatherOneDay/index.ts","components/City.tsx","containers/CityContainer.tsx","pages/CityPage.tsx","components/Layout.tsx","containers/PagesLayout.tsx","routes.tsx","App.tsx","index.tsx"],"names":["RouterProvider","routes","routing","useRoutes","fallback","useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","length","handler","setTimeout","clearTimeout","getFormattedDate","date","formatString","format","formatTemp","str","toString","replace","weatherApi","appId","units","WeatherIcon","iconId","main","styles","src","alt","className","useStyles","makeStyles","img","width","height","link","textDecoration","color","WeatherAutocomplete","name","noOptionsText","options","label","isLoading","onChange","classes","optionsClear","useMemo","map","country","sys","Autocomplete","loading","disableClearable","clearOnBlur","loadingText","renderOption","option","find","id","weather","feels_like","to","Grid","container","alignItems","item","xs","Typography","variant","icon","renderInput","params","TextField","SearchWeather","weatherList","search","values","Box","my","list","axiosInstance","axios","create","getWeatherFindQueryKey","getWeatherFindRequest","a","get","q","query","appid","data","SearchContainer","config","useFormik","initialValues","onSubmit","Promise","resolve","handleChange","debounceValue","enabled","useQuery","queryKey","queryFn","SearchPage","getWeatherOneQueryKey","getWeatherOneRequest","theme","paddingLeft","spacing","City","oneDayForecast","dt","temp","onGoBack","display","Date","pt","pb","Button","onClick","Divider","orientation","CityContainer","cityId","navigate","useNavigate","CircularProgress","mainPath","CityPage","useParams","Number","root","flexDirection","justifyContent","minHeight","background","paper","padding","boxShadow","borderRadius","Layout","children","Paper","PagesLayout","path","element","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","App","QueryClientProvider","client","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca27445c.chunk.js","sourcesContent":["import React, { Suspense } from 'react'\nimport { useRoutes } from 'react-router-dom'\nimport { PartialRouteObject } from 'react-router'\n\ntype PropsType = {\n    routes: PartialRouteObject[]\n}\n\nexport default function RouterProvider({ routes }: PropsType) {\n    const routing = useRoutes(routes)\n\n    return <Suspense fallback=\"loading\">{routing}</Suspense>\n}\n","import { useState, useEffect } from 'react'\n\nconst useDebounce = (value: string, delay: number) => {\n    const [debouncedValue, setDebouncedValue] = useState(value)\n    useEffect(() => {\n        if (value.length) {\n            const handler = setTimeout(() => {\n                setDebouncedValue(value)\n            }, delay)\n            return () => {\n                clearTimeout(handler)\n            }\n        }\n    }, [value])\n\n    return debouncedValue\n}\n\nexport default useDebounce\n","import { format } from 'date-fns'\n\nexport const getFormattedDate = (\n    date: Date,\n    formatString = 'HH:mm, dd MMMM'\n): string => format(date, formatString)\n\nexport const formatTemp = (str: number): string =>\n    str.toString().replace(/\\.\\d*$/, '')\n","export const weatherApi = 'https://api.openweathermap.org/data/2.5'\nexport const weatherIconApi = 'https://openweathermap.org/img/wn'\nexport const appId = '3238ccb17a8a11abd9f0a08c8f575a8f'\nexport const units = 'metric'\n","import React from 'react'\nimport { weatherIconApi } from 'services/ApiService/const'\n\ntype Props = {\n    iconId: string\n    main: string\n    styles: string\n}\nconst WeatherIcon = ({ iconId, main, styles }: Props) => (\n    <img\n        src={`${weatherIconApi}/${iconId}@2x.png`}\n        alt={main}\n        className={styles}\n    />\n)\nexport default WeatherIcon\n","import React, { useMemo } from 'react'\nimport { FormikHandlers } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { Typography, TextField, Grid } from '@material-ui/core'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { CityFindInfo } from 'services/ApiService/interfaces/CityFindInfo'\nimport { formatTemp } from 'utils/helpers'\nimport WeatherIcon from './WeatherIcon'\n\nconst useStyles = makeStyles({\n    img: {\n        width: 32,\n        height: 32,\n    },\n    link: {\n        width: '100%',\n        textDecoration: 'none',\n        color: 'black',\n    },\n})\n\ntype Props = {\n    name: string\n    options?: CityFindInfo[]\n    label: string\n    isLoading: boolean\n    value: string\n    noOptionsText: string\n    onChange: FormikHandlers['handleChange']\n}\n\nconst WeatherAutocomplete = ({\n    name,\n    noOptionsText,\n    options,\n    label,\n    isLoading,\n    value,\n    onChange,\n}: Props) => {\n    const classes = useStyles()\n\n    const optionsClear = useMemo(\n        () =>\n            options?.map(({ name, sys: { country } }) => `${name}, ${country}`),\n        [options]\n    )\n\n    return (\n        <Autocomplete\n            loading={isLoading}\n            disableClearable\n            clearOnBlur\n            loadingText=\"Loading...\"\n            noOptionsText={noOptionsText}\n            options={optionsClear || []}\n            renderOption={option => {\n                const {\n                    id,\n                    weather,\n                    main: { feels_like } = {},\n                } = options?.find(\n                    ({ name, sys: { country } }) =>\n                        `${name}, ${country}` === option\n                ) as CityFindInfo\n\n                return (\n                    <Link to={`${id}`} className={classes.link}>\n                        <Grid container alignItems=\"center\">\n                            <Grid item xs={4}>\n                                <Typography variant=\"body1\">\n                                    {option}\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <Typography variant=\"body1\">\n                                    Feels:&nbsp;\n                                    {formatTemp(feels_like as number)}\n                                    &nbsp;&#176;C\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={4}>\n                                <WeatherIcon\n                                    main={weather[0].main}\n                                    iconId={weather[0].icon}\n                                    styles={classes.img}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Link>\n                )\n            }}\n            renderInput={params => (\n                <TextField\n                    {...params}\n                    name={name}\n                    value={value}\n                    onChange={onChange}\n                    label={label}\n                    variant=\"outlined\"\n                />\n            )}\n        />\n    )\n}\nexport default WeatherAutocomplete\n","import React from 'react'\nimport { FormikHandlers } from 'formik'\nimport { Box, Typography } from '@material-ui/core'\nimport { WeatherFindQueryResponse } from 'services/ApiService/queries/WeatherFind/types'\nimport WeatherAutocomplete from './Autocomplete'\n\ntype Props = {\n    isLoading: boolean\n    weatherList?: WeatherFindQueryResponse\n    values: { search: string }\n    onChange: FormikHandlers['handleChange']\n}\n\nconst SearchWeather = ({\n    isLoading,\n    weatherList,\n    values: { search },\n    onChange,\n}: Props) => (\n    <>\n        <Typography variant=\"h2\">Weather Forecast</Typography>\n        <Box my={3}>\n            <WeatherAutocomplete\n                name=\"search\"\n                label=\"Write full name of your city\"\n                noOptionsText=\"No cities =(\"\n                options={weatherList?.list}\n                isLoading={isLoading}\n                value={search}\n                onChange={onChange}\n            />\n        </Box>\n    </>\n)\n\nexport default SearchWeather\n","import axios from 'axios'\n\nconst axiosInstance = axios.create()\n\nexport default axiosInstance\n","import { AxiosError } from 'axios'\nimport { useQuery } from 'react-query'\nimport { UseQueryOptions } from 'react-query/types/react/types'\nimport { appId, units, weatherApi } from 'services/ApiService/const'\nimport axiosInstance from 'services/ApiService/fetch'\nimport { WeatherFindQueryResponse, WeatherFindQueryVariables } from './types'\n\nexport const getWeatherFindQueryKey = (params: WeatherFindQueryVariables) => [\n    'weatherFind',\n    params,\n]\n\nconst getWeatherFindRequest = async (params: WeatherFindQueryVariables) => {\n    const { data } = await axiosInstance.get<WeatherFindQueryResponse>(\n        `${weatherApi}/find`,\n        { params: { q: params.query, units: units, appid: appId } }\n    )\n    return data\n}\n\nexport const useWeatherFindQuery = (\n    params: WeatherFindQueryVariables,\n    config?: UseQueryOptions<WeatherFindQueryResponse, AxiosError>\n) =>\n    useQuery<WeatherFindQueryResponse, AxiosError>({\n        queryKey: getWeatherFindQueryKey(params),\n        queryFn: () => getWeatherFindRequest(params),\n        ...(config || {}),\n    })\n","import React from 'react'\nimport { useFormik } from 'formik'\nimport useDebounce from 'utils/useDebounce'\nimport SearchWeather from 'components/SearchWeather'\nimport { useWeatherFindQuery } from 'services/ApiService/queries/WeatherFind'\n\nexport default function SearchContainer() {\n    const { values, handleChange } = useFormik({\n        initialValues: {\n            search: '',\n        },\n        onSubmit: () => Promise.resolve(),\n    })\n\n    const debounceValue = useDebounce(values.search, 400)\n\n    const { data, isLoading } = useWeatherFindQuery(\n        { query: debounceValue },\n        {\n            enabled: !!debounceValue,\n        }\n    )\n\n    return (\n        <SearchWeather\n            isLoading={isLoading}\n            weatherList={data}\n            values={values}\n            onChange={handleChange}\n        />\n    )\n}\n","import React from 'react'\nimport SearchContainer from 'containers/SearchContainer'\n\nexport default function SearchPage() {\n    return <SearchContainer />\n}\n","import { AxiosError } from 'axios'\nimport { useQuery } from 'react-query'\nimport { UseQueryOptions } from 'react-query/types/react/types'\nimport { appId, units, weatherApi } from 'services/ApiService/const'\nimport axiosInstance from 'services/ApiService/fetch'\nimport { WeatherOneQueryResponse, WeatherOneQueryVariables } from './types'\n\nexport const getWeatherOneQueryKey = (params: WeatherOneQueryVariables) => [\n    'weatherOne',\n    params,\n]\n\nconst getWeatherOneRequest = async (params: WeatherOneQueryVariables) => {\n    const { data } = await axiosInstance.get<WeatherOneQueryResponse>(\n        `${weatherApi}/weather`,\n        { params: { id: params.id, units: units, appid: appId } }\n    )\n    return data\n}\n\nexport const useWeatherOneDayQuery = (\n    params: WeatherOneQueryVariables,\n    config?: UseQueryOptions<WeatherOneQueryResponse, AxiosError>\n) =>\n    useQuery<WeatherOneQueryResponse, AxiosError>({\n        queryKey: getWeatherOneQueryKey(params),\n        queryFn: () => getWeatherOneRequest(params),\n        ...(config || {}),\n    })\n","import React from 'react'\nimport { CityOneDay } from 'services/ApiService/interfaces/CityOneDay'\nimport { Box, Button, Divider, Typography } from '@material-ui/core'\nimport { formatTemp, getFormattedDate } from 'utils/helpers'\nimport { makeStyles } from '@material-ui/core/styles'\nimport WeatherIcon from './WeatherIcon'\n\nconst useStyles = makeStyles(theme => ({\n    img: {\n        width: 80,\n        height: 80,\n        paddingLeft: theme.spacing(3),\n    },\n}))\n\ntype Props = {\n    oneDayForecast: CityOneDay\n    onGoBack: () => void\n}\n\nexport default function City({\n    oneDayForecast: {\n        name,\n        sys: { country },\n        dt,\n        weather,\n        main: { temp },\n    },\n    onGoBack,\n}: Props) {\n    const classes = useStyles()\n\n    return (\n        <Box display=\"flex\">\n            <Box>\n                <Typography variant=\"h3\">{`${name}, ${country}`}</Typography>\n                <Typography variant=\"subtitle1\" color=\"primary\">\n                    {getFormattedDate(new Date(dt * 1000))}\n                </Typography>\n                <Box display=\"flex\" alignItems=\"center\" pt={4} pb={3}>\n                    <Typography variant=\"h2\">\n                        {formatTemp(temp)}\n                        &nbsp;&#176;C\n                    </Typography>\n                    <WeatherIcon\n                        main={weather[0].main}\n                        iconId={weather[0].icon}\n                        styles={classes.img}\n                    />\n                </Box>\n                <Button variant=\"contained\" color=\"primary\" onClick={onGoBack}>\n                    Back to search\n                </Button>\n            </Box>\n            <Divider orientation=\"vertical\" />\n        </Box>\n    )\n}\n","import React from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { useWeatherOneDayQuery } from 'services/ApiService/queries/WeatherOneDay'\nimport { useWeatherDaysQuery } from 'services/ApiService/queries/WeatherDays'\nimport City from 'components/City'\nimport { mainPath } from 'routes'\n\ntype Props = {\n    cityId: number\n}\nexport default function CityContainer({ cityId }: Props) {\n    const navigate = useNavigate()\n    const {\n        data: oneDayForecast,\n        isLoading: isOneDayLoading,\n    } = useWeatherOneDayQuery(\n        { id: cityId },\n        {\n            enabled: !!cityId,\n        }\n    )\n    // const {\n    //     data: daysForecast,\n    //     isLoading: isFiveDaysLoading,\n    // } = useWeatherDaysQuery(\n    //     { id: cityId, days: 1 },\n    //     {\n    //         enabled: !!cityId,\n    //     }\n    // )\n\n    const handleGoBack = () => {\n        navigate(`/${mainPath}`)\n    }\n\n    return isOneDayLoading ? (\n        <CircularProgress />\n    ) : (\n        <City oneDayForecast={oneDayForecast!} onGoBack={handleGoBack} />\n    )\n}\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport CityContainer from 'containers/CityContainer'\n\nexport default function CityPage() {\n    const { cityId } = useParams()\n\n    return <CityContainer cityId={Number(cityId)} />\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Paper } from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: '100vh',\n        background:\n            'linear-gradient(134.18deg, #CDF0FF 9.2%, ' +\n            'rgba(186, 223, 244, 0.98991) 21.69%, ' +\n            'rgba(56, 102, 169, 0.92) 63.84%, #2E5DA4 83.89%, #2E5DA4 91.59%)',\n    },\n    paper: {\n        padding: theme.spacing(6),\n        boxShadow: '0px 0px 30px rgba(13, 21, 63, 0.25)',\n        borderRadius: 16,\n    },\n}))\n\ntype Props = {\n    children: React.ReactNode\n}\nconst Layout: React.FC<Props> = ({ children }) => {\n    const classes = useStyles()\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>{children}</Paper>\n        </div>\n    )\n}\n\nexport default Layout\n","import React from 'react'\nimport { Outlet } from 'react-router-dom'\nimport Layout from 'components/Layout'\n\nconst PagesLayout: React.FC = () => {\n    return (\n        <Layout>\n            <Outlet />\n        </Layout>\n    )\n}\n\nexport default PagesLayout\n","import React from 'react'\nimport { Navigate, PartialRouteObject } from 'react-router'\nimport SearchPage from './pages/SearchPage'\nimport CityPage from './pages/CityPage'\nimport PagesLayout from './containers/PagesLayout'\n\nexport const mainPath = 'weather'\n\nexport const routes: PartialRouteObject[] = [\n    {\n        path: '/',\n        element: <Navigate to={mainPath} />,\n    },\n\n    {\n        path: `${mainPath}/*`,\n        element: <PagesLayout />,\n        children: [\n            {\n                path: '/',\n                element: <SearchPage />,\n            },\n            {\n                path: ':cityId',\n                element: <CityPage />,\n            },\n        ],\n    },\n]\n","import React from 'react'\nimport { BrowserRouter } from 'react-router-dom'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport RouterProvider from 'providers/RouterProvider/RouterProvider'\nimport { routes } from 'routes'\n\nexport const queryClient = new QueryClient({\n    defaultOptions: {\n        queries: {\n            refetchOnWindowFocus: false,\n        },\n    },\n})\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <QueryClientProvider client={queryClient}>\n                <RouterProvider routes={routes} />\n            </QueryClientProvider>\n        </BrowserRouter>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}